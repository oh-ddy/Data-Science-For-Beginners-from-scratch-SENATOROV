"""Contributing issue."""

# 1.1. Что такое GitHub?
# GitHub — это платформа для хостинга Git-репозиториев и совместной разработки
#
# 1.2. Как GitHub связан с Git?
# GitHub использует Git как систему контроля версий
# Git работает локально
# GitHub — удалённый хостинг для репозиториев
#
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# Fork создаёт копию репозитория на GitHub (в вашем аккаунте)
# clone — копирует репозиторий на компьютер.
#
# 1.4. Зачем нужны и как работают pull requests?
# Pull request — запрос на слияние изменений из одной ветки в другую
# Используется для обсуждения и проверки кода перед слиянием
#
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# Да, GitHub связывает коммиты с учётной записью по email, указанному в настройках Git и GitHub
#
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
# `ssh-keygen -o`
#
# 2. Создайте ишьюс и запомните его номер, в https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues,
# назовите его "UPDATE README", в дескрипшене добавьте список задач (Рисунок 102)
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues/401
#
# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых у нас нет прав на внесения
# изменений путём отправки (push) изменений, вы можете создать своё собственное ответвление,
# что нужно сделать чтобы создать собственное ответвление? (Рисунок 88), сделайте ответвление
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и вставьте сюда ссылку на ваше ответвление
#
# https://github.com/oh-ddy/Data-Science-For-Beginners-from-scratch-SENATOROV
#
#
# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev
#
# https://github.com/oh-ddy/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# 2.3 В README файле вашего ФОРКА, добавьте ссылку на мой телеграм канал https://t.me/RuslanSenatorov,
# сохраните коммит, название коммита - в тайтле название ишьюса (#номер_ишьюс), в дескрипшене -
# Closes #NUMBER-ISSUES номер возьмите из пункта 2
#
# **сделано**
#
# 2.4 Отправьте пул реквест из ФОРКА в основу В ВАШУ ВЕТКУ, тайтл пул реквеста скопируйте из ISSUES-TITLE, в дескрипшине пул реквеста напишите Closes #NUMBER-ISSUES вставьте номер из пункта 2
#
# **сделано**
#
# 2.5 Прокомментириуйте ваш пул реквест перед слиянием, перейдите во вкладку(Рисунок 92) и напишите "ок", потом нажимайте сабмит ревью затем не выходя из этой вкладки, в файле README , добавьте туда ссылку на https://t.me/SENATOROVAI
#
# **сделано**
#
# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш пул реквест
#
# https://github.com/oh-ddy/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
#
# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории, найти можно тут
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed - SENATOROV
#
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку?
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/6e92003c6384148233fa1878594f4ba10aef6e5f
#
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно? (Рисунок 117)
#
# При открытии запроса на слияние вверху страницы есть  меню для выбора целевой и
# исходной веток. Если нажать кнопку Edit справа, то станет доступным выбор не только
# исходной ветки, а ещё и форка.
# Здесь можно указать новую ветку для слияния с другим запросом слияния или другим
# форком проекта.
# Далее упомянуть другой PR в описании или комментарии с помощью #номер — это создаёт ссылку и уведомление, но не техническую зависимость.
# Это нужно для того чтобы предлагать улучшение чужому пулл реквесту или организовать цепочку изменений
#
#
# Рабочий процесс с использованием GitHub
#
#
# 3. Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
#     1. Ознакомиться с проектом: прочитать README, LICENSE, CONTRIBUTING.md, а также посмотреть открытые issues.
#     2. Сделать fork репозитория, чтобы получить свою копию на GitHub.
#     3. Клонировать свой fork локально и настроить remote upstream на оригинальный репозиторий.
#     4. Создать новую ветку на основе актуальной ветки main/master из upstream.
#     5. Внести изменения, следуя стилю и соглашениям проекта, и закоммитить их.
#     6. Запушить ветку в свой fork на GitHub.
#     7. Открыть pull request в оригинальный репозиторий.
#     8. После мержа (или для дальнейшей работы) синхронизировать свой fork с upstream, чтобы он оставался актуальным.
#
#
# 3.1.
#
#     Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues?
#
#     Упомянуть ишью в описании PR с ключевым словом и номером ишью (closes #1)
#     PR должен быть смёржен в ветку по умолчанию (main/master), иначе закрытие не сработает
#     Номер issue должен быть корректным и существовать в том же репозитории
#
#     Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
#
#     В целом те же что и для пулл реквеста, ключевые слова, упоминания ишью, нахождение в том же репозитории
#
#
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
# Вкладка "pull requests" в репозитории, при выборе пулл реквеста внизу страницы будет "close pull request"
# ![image.png](attachment:image.png)
#
# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
# Это хорошая практика и зачастую нужно создать сначала ишью, но в случаях мелких изменений это необязательно
#
# 3.4 В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
# Files changed
#
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# Conversation
#
# Создание запроса на слияние
#
#
# 4. Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# Нет, нельзя открыть pull request, если вы ничего не вносили в свой fork
# Pull request на GitHub создаётся из ветки с изменениями в целевую ветку
# Если в вашем fork’е нет новых коммитов по сравнению с целевой веткой — GitHub покажет:
# “There isn’t anything to compare” и не даст создать PR
#
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# При наличии запушенных изменений нажать на "Compare & pull request"
#
# 4.2 Что нужно сделать Если ваш Форк устарел?
# Нажать Sync fork
#
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
# нужно синхронизировать его с оригинальным репозиторием: добавить remote upstream,
# получить свежие изменения (git fetch upstream), обновить свою локальную ветку (main/master)
# через merge или rebase, и отправить обновления в свой fork на GitHub (git push origin main).
#
# Отрывки кода
#
#
# 5. Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# Для добавления отрывка кода следует обрамить его обратными кавычками
#
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
# r
#
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# Воспользоваться шаблоном Markdown \!\[описание\]\(ссылка\)
# Или просто вставить картинку из буфера или drag and drop
#
# Поддержание GitHub репозитория в актуальном состоянии
#
#
# 6. Как понять что ваш форк устарел?
# GitHub покажет сообщение 'This branch is behind main by (some) commits'
#
# 6.1 Как обновить форк?
# Sync fork
#
# Добавление участников
#
#
# 7. Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
# На странице репозитория -> settings -> collaborators -> add collaborators
#
# Упоминания и уведомления
#
#
# 8. Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# @
#
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# https://github.com/notifications
#
# Особенные файлы
#
#
# 9. Что такое и зачем нужен файл README
# README — это текстовый файл в корне репозитория, который описывает проект: что он делает, его цели и особенности
# Содержит инструкции, зависимости, примеры кода
# Помогает быстро понять, как установить, запустить и использовать проект
#
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# GitHub будет показывать ссылку на него при создании любого запроса на слияние
# Файл CONTRIBUTING это руководство для участников проекта, нужен чтобы
# Объяснить, как правильно вносить вклад
# Указать требования к коду, стилю, тестам и коммитам
# Описать процесс работы с pull request’ами и issue
#
# Управление проектом
#
#
# 10. Как изменить основную ветку (Рисунок 123)
# В настройках репозитория на закладке «Options»
# Просто выберите нужную ветку из выпадающего меню и она станет основной для
# большинства операций, включая извлечение кода при клонировании репозитория
#
# 10.1 Как передать проект? какая кнопка? (рисунок 124)
# Кнопка «Transfer ownership» в настройках репозитория на закладке «Options»
#
# 10.2 Что такое файл .gitignore?
# Файл .gitignore указывает Git, какие файлы и директории следует игнорировать и не отслеживать в репозитории,
# например временные, локальные или секретные файлы
#
#
# ПОЗДРАВЛЯЮ ВЫ ГОТОВЫ К ОПЕНСОРС
