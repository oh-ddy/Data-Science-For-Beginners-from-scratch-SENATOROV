"""Issues issue."""

# Общие вопросы
#
# 1. Что такое Issues на GitHub и для чего они используются?
# Можно использовать чтобы разработчик рассказывал вам как работает код или для обучения программированию
# Можно запрашивать объяснение выделяя интересующие строчки в коде и запрашивать объяснение
# Так же для нахождения проблем в коде
#
# 2. Чем Issues отличаются от других инструментов управления задачами?
# Можно ссылаться на issue в коммитах, PR, ветках
# Автоматическое закрытие issue при мерже PR
# Можно автоматически назначать метки, ответственных, переносить в проекты
# Возможность просматривать, какие коммиты/PR относятся к задаче
#
# 3. Какие основные компоненты (поля) есть у каждого Issue?
# Тайтл и дескрипшен
# А также Labels, Assignees, Milestone, Статус, Обсуждение
#
# Создание Issues
#
# 4. Как создать новое Issue в репозитории?
# Выделяем нужные строчки кода через шифт, кликом на первую и последнюю строчку
# Нажимаем "copy permalink"
# В верхней панели гитхаба "issues" -> new issue
# Выбираем тип issue(bug report, feature request и т.д.)
# Далее заполняем тайтл и дескрипшен
# Нажимаем "Submit new issue"
#
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# Действия которые нужно произвести, файл на который ссылаемся
# В целом максимально информативно описать суть проблемы, ссылаясь на места куда нужно обратить внимание
# Код ошибки, трассировка из терминала и т.д.
#
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# Теги помогают классифицировать задачи
# Стандартные:
# - `bug` — Неожиданная ошибка или неправильное поведение.
# - `documentation` — Нужно обновить или дополнить документацию.
# - `duplicate` — Дубликат другой задачи или обсуждения.
# - `enhancement` — Улучшение существующей функции.
# - `good first issue` — Подходит для новичков (отображается на странице «Contribute»).
# - `help wanted` — Нужна помощь от сообщества или команды.
# - `invalid` — Задача неактуальна или основана на ошибке.
# - `question` — Требуется уточнение или дополнительная информация.
# - `wontfix` — Задачу не будут исправлять или реализовывать.
#
# 7. Как прикрепить Assignees (ответственных) к Issue?
# При переходе на ишью можно выбрать ответственных в поле assignees справа
#
# Выберите ишью, которые нужно назначить кому-то
# В верхнем правом углу нажмите кнопку 'Назначить'
# Можно назначить для ишью до 10 пользователей.
#
# Работа с Issues
#
# 8. Как использовать Labels для классификации задач?
# Метки позволяют классифицировать задачи, пулреквесты и обсуждения по категориям, таким как:
# - приоритет (например, high-priority)
# - тип задачи (например, bug, feature request)
# - часть проекта (например, frontend, backend)
# - команда, ответственная за выполнение
#
# Вы можете создавать собственные метки и применять их для фильтрации и организации работы.
# Цвет метки помогает визуально отличать категории — например, красный для багов, зелёный для улучшений.
#
# 9. Для чего нужен Milestone, и как связать его с Issue?
# Дедлайн ошибки, в каком месяце нужно решить ишью,
# по нему можно находить тикеты которые закрыли в определенный месяц
# При переходе на ишью можно выбрать майлстоуны в поле справа
#
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
# Можно указать ссылку на ишью в тайтле пулл реквеста или написать номер ишью
# Ссылку или номер ишью обязательно в тайтле в скобках
# В заголовке пул реквеста должен быть заголовок из ишью
#
# 11. Как добавить комментарий к существующему Issue?
# На странице задачи github внизу в поле "Leave a comment"
# После этого нажать кнопку Comment, чтобы опубликовать
#
#
# Закрытие и завершение Issues
#
# 12. Как закрыть Issue вручную?
# Нужно открыть его на GitHub и нажать на кнопку "Close issue" под полем комментария.
# При желании добавьте поясняющий комментарий перед закрытием — это поможет команде понять причину.
# Закрытые Issues можно в любой момент переоткрыть.
#
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
# Да можно, в PR должно быть указанно ключевое слово, и PR должен находится в ветке по умолчанию
# Ключевые слова:
# - close
# - closes
# - closed
# - fix
# - fixes
# - fixed
# - resolve
# - resolves
# - resolved
#
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Зайти на его страницу на GitHub и нажать кнопку "Reopen issue" рядом с закрытым статусом.
# Это вернёт задачу в активное состояние.
# Все комментарии и история сохраняются.
#
# Фильтрация и поиск
#
# 15. Как найти все открытые или закрытые Issues в репозитории?
# Во вкладке "issues" на странице репозитория
# Кнопки "open" и "closed"
#
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
# Во вкладке "issues" на странице репозитория справа от кнопок "open" и "closed"
# Можно фильтровать по авторам, меткам, проектам, майлстоунам, ответственным
#
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
# Кнопка "sort" справа от фильтрации по меткам, исполнителям и т.п.
#
# Интеграции и автоматизация
#
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
# Настраиваются через вкладку Watch в репозитории, нужно выбрать “All Activity” или “Issues” для получения уведомлений
# Также можно настроить правила в Settings -> Notifications -> Custom routing, чтобы перенаправлять уведомления по упоминаниям
# Для сложной автоматизации - GitHub Actions
#
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
# Projects в GitHub — это гибкие доски, таблицы или роадмапы, которые помогают планировать и отслеживать работу, интегрируясь напрямую с Issues и Pull Requests.
# В них не установлена методология, а адаптируются: можно фильтровать, группировать, сортировать задачи, добавлять кастомные поля, диаграммы и автоматизации.
#
# Чтобы связать Project с Issue, нужно добавить Issue в Project — вручную, через метки, или автоматически по правилам.
# Все изменения синхронизируются в обе стороны: если назначим исполнителя в Project — это отразится в самом Issue, и наоборот.
#
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# GraphQL API, GitHub Actions
# Вебхуки (отправка событий в Slack, Discord, Jira и т.п.)
# Интеграции через GitHub Apps
# Также сторонние боты — Probot, Dependabot, Mergify
#
# Коллаборация
#
# 21. Как упомянуть другого пользователя в комментарии к Issue?
# Введите символ @ и начните вводить имя пользователя — GitHub предложит совпадения
# Выберите нужного участника, и он получит уведомление
#
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
# Тэгнуть автора и задать вопрос, так как он получит уведомление, шанс что вопрос увидят очень велик
#
#
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
# Можно закрыть его с комментарием "закрытие из-за не актуальности" или "закрываю как дубликат #номер_ишью"
# Так же есть возможность удалить ишью, в правом сайд баре под кнопкой "notifications" есть кнопка "delete issue"
#
# Практические аспекты
#
# 24. Как использовать шаблоны для создания Issues?
# Нужно добавить в репозиторий папку .github/ISSUE_TEMPLATE/ с файлами в формате Markdown (например, bug_report.md, feature_request.md)
# или YAML (для Issue Forms).
# При создании Issue пользователь увидит выпадающий список с шаблонами — при выборе подставится структурированная форма.
# YAML-формы позволяют задавать поля, валидацию и автоматические метки.
#
# 25. Что такое Linked Issues, и как создать связь между задачами?
# Связанные между собой issue, могут упоминать друг друга через #номер_ишью в описании, названии или комменту к ишью
# Связь отображается в интерфейсе обеих задач
# Все связи отображаются на странице Issue
#
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# Можно отслеживать метрики вроде времени от создания до закрытия, времени первого ответа, срока нахождения в статусе,
# частоты открытия/закрытия задач, а также распределение по меткам, исполнителям или майлстоунам
#
# 27. Какие best practices рекомендуются при работе с Issues в команде?
# При работе с Issues в команде рекомендуется:
# - использовать понятные заголовки и шаблоны
# - классифицировать задачи метками (тип, приоритет, область)
# - назначать ответственных
# - связывать зависимости
# - закрывать с пояснением
# - вести обсуждения в комментариях
# - регулярно актуализировать статус чтобы вся история и контекст оставались в GitHub
#
#
